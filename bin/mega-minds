#!/usr/bin/env node

const path = require('path');
const fs = require('fs');

// Check if we're running from node_modules or in development
const isInstalledPackage = __dirname.includes('node_modules');
const projectPath = process.cwd();

// Dynamically resolve paths based on installation context
let MegaMindsInstaller, AIDevTeam;

if (isInstalledPackage) {
    // Running from installed package
    MegaMindsInstaller = require('../lib/installer.js');
    AIDevTeam = require('../lib/core/AIDevTeam');
} else {
    // Running in development
    MegaMindsInstaller = require('../lib/installer.js');
    AIDevTeam = require('../lib/core/AIDevTeam');
}

// Validate that mega-minds is properly installed as a dependency
function validateInstallation() {
    if (isInstalledPackage) {
        const packageJsonPath = path.join(projectPath, 'package.json');
        if (fs.existsSync(packageJsonPath)) {
            try {
                const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
                const hasDependency = 
                    (packageJson.dependencies && packageJson.dependencies['mega-minds']) ||
                    (packageJson.devDependencies && packageJson.devDependencies['mega-minds']);
                
                if (!hasDependency) {
                    console.log('‚ö†Ô∏è  Warning: mega-minds is not in your package.json dependencies');
                    console.log('   Run "npm install mega-minds --save" to add it properly');
                    console.log('');
                }
            } catch (error) {
                // Ignore validation errors silently
            }
        }
    }
}

async function main() {
    const command = process.argv[2];
    const args = process.argv.slice(3);
    
    // Validate installation for all commands except init
    if (command !== 'init') {
        validateInstallation();
    }

    try {
        switch (command) {
            case 'init':
                console.log('üöÄ Initializing mega-minds AI development team...');
                await MegaMindsInstaller.run();
                const team = new AIDevTeam(projectPath);
                await team.initialize();
                console.log('\n‚úÖ mega-minds AI development team ready!');
                console.log('\nüìã Next steps:');
                console.log('   1. Start Claude Code in this directory');
                console.log('   2. Claude Code will automatically read CLAUDE.md');
                console.log('   3. Begin development with intelligent agent coordination');
                console.log('\nüí° Available commands:');
                console.log('   mega-minds agent-status     - See agent activity');
                console.log('   mega-minds memory-status    - Check memory usage');
                console.log('   mega-minds memory-cleanup   - Force memory cleanup');
                console.log('   mega-minds save-session     - Save current session');
                console.log('   mega-minds compress-context - Optimize memory usage');
                break;

            case 'agent-status':
                const team1 = new AIDevTeam(projectPath);
                const status = await team1.getAgentStatus();
                console.log('\nü§ñ Agent Status:');

                if (Object.keys(status.agentStates).length === 0) {
                    console.log('   No agents currently active');
                } else {
                    Object.entries(status.agentStates).forEach(([agent, state]) => {
                        console.log(`   ${agent}: ${state.status} - ${state.currentTask || 'idle'}`);
                    });
                }

                console.log('\nüìä Memory Stats:');
                console.log(`   Total sessions: ${status.memoryStats.totalSessions}`);
                console.log(`   Project age: ${status.memoryStats.projectAge} days`);
                console.log(`   Last session: ${status.memoryStats.lastSession || 'none'}`);
                break;

            // NEW: Memory status command
            case 'memory-status':
                const team2 = new AIDevTeam(projectPath);
                await team2.initialize();

                // Get memory status from SessionManager
                const memStatus = team2.sessions.getMemoryStatus();

                console.log('üß† Memory Status Report');
                console.log('========================');
                console.log(`System Memory: ${memStatus.system.heapUsedMB}MB (${memStatus.system.status})`);
                console.log(`Warning Threshold: ${memStatus.system.warningThreshold}MB`);
                console.log(`Critical Threshold: ${memStatus.system.criticalThreshold}MB`);

                if (memStatus.session) {
                    console.log(`\nActive Session: ${memStatus.session.id}`);
                    console.log(`Handoffs: ${memStatus.session.handoffs}`);
                    console.log(`Work Items: ${memStatus.session.workItems}`);
                } else {
                    console.log('\nNo active session');
                }

                console.log(`\nLast Cleanup: ${memStatus.cleanup.lastCleanup}`);
                console.log(`Auto-save: ${memStatus.cleanup.nextAutoSave}`);

                // Provide recommendations
                if (memStatus.system.status === 'critical') {
                    console.log('\nüö® CRITICAL: Memory usage is dangerous - save session and restart Claude Code');
                } else if (memStatus.system.status === 'warning') {
                    console.log('\n‚ö†Ô∏è WARNING: Memory usage is high - consider saving session');
                } else {
                    console.log('\n‚úÖ Memory usage is healthy');
                }
                break;

            // NEW: Memory cleanup command
            case 'memory-cleanup':
                const team3 = new AIDevTeam(projectPath);
                await team3.initialize();

                console.log('üßπ Forcing memory cleanup...');
                await team3.sessions.forceMemoryCleanup();

                // Force garbage collection if available
                if (global.gc) {
                    global.gc();
                    console.log('üóëÔ∏è Garbage collection completed');
                }

                // Show new status
                const newStatus = team3.sessions.getMemoryStatus();
                console.log(`‚úÖ Cleanup complete. Memory: ${newStatus.system.heapUsedMB}MB (${newStatus.system.status})`);
                break;

            case 'save-session':
                const sessionDescription = args.join(' ') || 'Manual session save';
                const team4 = new AIDevTeam(projectPath);
                await team4.initialize();

                console.log(`üíæ Saving session: "${sessionDescription}"`);
                
                // Update session description before saving
                if (team4.sessions.currentSession) {
                    team4.sessions.currentSession.description = sessionDescription;
                }
                
                await team4.sessions.saveActiveSession();
                console.log('‚úÖ Session saved successfully');

                // Show memory status after save
                const postSaveStatus = team4.sessions.getMemoryStatus();
                console.log(`üìä Memory after save: ${postSaveStatus.system.heapUsedMB}MB (${postSaveStatus.system.status})`);
                break;

            case 'load-session':
                const team5 = new AIDevTeam(projectPath);
                const sessionInfo = await team5.memory.loadLatestSession();
                if (sessionInfo) {
                    console.log('\nüìÇ Latest Session:');
                    console.log(`   ID: ${sessionInfo.sessionId}`);
                    console.log(`   Description: ${sessionInfo.description}`);
                    console.log(`   Started: ${sessionInfo.startTime}`);
                    console.log(`   Last Update: ${sessionInfo.lastUpdate}`);

                    if (sessionInfo.workflow) {
                        console.log(`   Phase: ${sessionInfo.workflow.currentPhase}`);
                        console.log(`   Active Agents: ${sessionInfo.agents.activeCount}`);
                    }
                } else {
                    console.log('üìÇ No saved sessions found');
                }
                break;

            case 'compress-context':
                const team6 = new AIDevTeam(projectPath);
                await team6.initialize();

                console.log('üóúÔ∏è Compressing context for Claude Code...');
                // This would typically be called automatically, but we can force it
                const context = await team6.loadProjectContext();
                const optimized = await team6.tokens.manageContext(context, 'Manual compression request');

                if (optimized.compressed) {
                    console.log(`‚úÖ Context compressed: ${optimized.tokenCount} tokens`);
                    if (optimized.emergency) {
                        console.log('‚ö†Ô∏è Emergency compression was applied due to high memory usage');
                    }
                } else {
                    console.log(`‚úÖ Context already optimized: ${optimized.tokenCount} tokens`);
                }
                break;

            case 'update-memory':
                const memoryUpdate = args.join(' ');
                if (!memoryUpdate) {
                    console.log('‚ùå Please provide a description: mega-minds update-memory "what happened"');
                    break;
                }

                const team7 = new AIDevTeam(projectPath);
                await team7.initialize();
                await team7.updateProjectMemory({ description: memoryUpdate });
                console.log(`‚úÖ Memory updated: "${memoryUpdate}"`);
                break;

            case 'chat':
                const userRequest = args.join(' ');
                if (!userRequest) {
                    console.log('‚ùå Please provide a request: mega-minds chat "your request here"');
                    break;
                }

                const team8 = new AIDevTeam(projectPath);
                console.log(`üéØ Processing: "${userRequest}"`);
                const result = await team8.handleRequest(userRequest);

                if (result.workflow) {
                    console.log('\nüìã Recommended workflow:');
                    result.workflow.steps.forEach((step, i) => {
                        console.log(`   ${i + 1}. ${step.agent}${step.nextAgent ? ` ‚Üí ${step.nextAgent}` : ''}`);
                    });
                }
                break;

            case 'stats':
                const team9 = new AIDevTeam(projectPath);
                const stats = await team9.getAgentStatus();
                console.log('\nüìä Project Statistics:');
                console.log(`   Project path: ${stats.projectPath}`);
                console.log(`   Total development sessions: ${stats.memoryStats.totalSessions}`);
                console.log(`   Project age: ${stats.memoryStats.projectAge} days`);
                console.log(`   Memory files: ${stats.memoryStats.memoryFiles}`);
                break;

            case 'setup-hooks':
                const { setupHooks } = require('../lib/commands/setup-hooks');
                await setupHooks();
                break;

            case 'hook-status':
                const { hookStatus } = require('../lib/commands/hook-status');
                await hookStatus();
                break;

            case 'trigger-quality-gates':
                const { triggerQualityGates } = require('../lib/commands/trigger-quality-gates');
                await triggerQualityGates();
                break;

            case 'save-session-auto':
                const { saveSessionAuto } = require('../lib/commands/save-session-auto');
                await saveSessionAuto();
                break;

            case 'preserve-context':
                const { preserveContext } = require('../lib/commands/preserve-context');
                await preserveContext();
                break;

            case 'verify':
                const { verifyInstallation } = require('../lib/verify-installation');
                verifyInstallation();
                break;

            default:
                console.log('ü§ñ mega-minds AI Development Team');
                console.log('\nUsage:');
                console.log('  mega-minds init                    - Initialize AI dev team in current folder');
                console.log('  mega-minds verify                  - Verify installation integrity');
                console.log('  mega-minds chat "request"          - Get agent coordination for a request');
                console.log('  mega-minds agent-status            - See current agent activity');
                console.log('  mega-minds memory-status           - Check memory usage and health');
                console.log('  mega-minds memory-cleanup          - Force memory cleanup and GC');
                console.log('  mega-minds save-session "desc"     - Save current development session');
                console.log('  mega-minds load-session            - View latest session info');
                console.log('  mega-minds compress-context        - Optimize memory for Claude Code');
                console.log('  mega-minds update-memory "desc"    - Update project memory');
                console.log('  mega-minds stats                   - Show project statistics');
                console.log('  mega-minds setup-hooks             - Configure Claude Code hooks');
                console.log('  mega-minds hook-status             - Check hook configuration');
                console.log('\nüí° Workflow:');
                console.log('  1. Run "mega-minds init" in your project folder');
                console.log('  2. Start Claude Code (it will read CLAUDE.md automatically)');
                console.log('  3. Claude Code can use mega-minds commands for memory management');
                console.log('  4. Agents coordinate automatically based on your requests');
                console.log('\nüß† Memory Management:');
                console.log('  - Use "memory-status" to check memory health');
                console.log('  - Use "memory-cleanup" if Claude Code becomes slow');
                console.log('  - Use "save-session" before memory gets critical');
                console.log('  - Restart Claude Code if memory stays above 3.5GB');
        }
    } catch (error) {
        console.error('‚ùå Error:', error.message);
        process.exit(1);
    }
}

main();