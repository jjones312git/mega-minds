#!/usr/bin/env node

const path = require('path');
const fs = require('fs');

// Check if we're running from node_modules or in development
const isInstalledPackage = __dirname.includes('node_modules');
const projectPath = process.cwd();

// Dynamically resolve paths based on installation context
let MegaMindsInstaller, AIDevTeam;

if (isInstalledPackage) {
    // Running from installed package
    MegaMindsInstaller = require('../lib/installer.js');
    AIDevTeam = require('../lib/core/AIDevTeam');
} else {
    // Running in development
    MegaMindsInstaller = require('../lib/installer.js');
    AIDevTeam = require('../lib/core/AIDevTeam');
}

// Validate that mega-minds is properly installed as a dependency
function validateInstallation() {
    if (isInstalledPackage) {
        const packageJsonPath = path.join(projectPath, 'package.json');
        if (fs.existsSync(packageJsonPath)) {
            try {
                const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
                const hasDependency = 
                    (packageJson.dependencies && packageJson.dependencies['mega-minds']) ||
                    (packageJson.devDependencies && packageJson.devDependencies['mega-minds']);
                
                if (!hasDependency) {
                    console.log('‚ö†Ô∏è  Warning: mega-minds is not in your package.json dependencies');
                    console.log('   Run "npm install mega-minds --save" to add it properly');
                    console.log('');
                }
            } catch (error) {
                // Ignore validation errors silently
            }
        }
    }
}

async function main() {
    const command = process.argv[2];
    const args = process.argv.slice(3);
    
    // Validate installation for all commands except init
    if (command !== 'init') {
        validateInstallation();
    }

    try {
        switch (command) {
            case 'init':
                console.log('üöÄ Initializing mega-minds AI development team...');
                await MegaMindsInstaller.run();
                const team = new AIDevTeam(projectPath);
                await team.initialize();
                console.log('\n‚úÖ mega-minds AI development team ready!');
                console.log('\nüìã Next steps:');
                console.log('   1. Start Claude Code in this directory');
                console.log('   2. Claude Code will automatically read CLAUDE.md');
                console.log('   3. Begin development with intelligent agent coordination');
                console.log('\nüí° Available commands:');
                console.log('   mega-minds agent-status     - See agent activity');
                console.log('   mega-minds memory-status    - Check memory usage');
                console.log('   mega-minds memory-cleanup   - Force memory cleanup');
                console.log('   mega-minds save-session     - Save current session');
                console.log('   mega-minds compress-context - Optimize memory usage');
                console.log('\nüîÑ New Handoff Commands (v2.0):');
                console.log('   mega-minds record-agent-start    - Record agent activation');
                console.log('   mega-minds record-agent-complete - Record agent completion');
                console.log('   mega-minds record-handoff        - Record explicit handoff');
                console.log('   mega-minds update-agent-status   - Update agent progress');
                console.log('\nüõ°Ô∏è Quality Gate Commands (v2.0):');
                console.log('   mega-minds run-quality-gates     - Run automated quality checks');
                console.log('   mega-minds quality-status        - Show quality metrics');
                break;

            case 'agent-status':
                const team1 = new AIDevTeam(projectPath);
                const status = await team1.getAgentStatus();
                console.log('\nü§ñ Agent Status:');

                if (Object.keys(status.agentStates).length === 0) {
                    console.log('   No agents currently active');
                } else {
                    Object.entries(status.agentStates).forEach(([agent, state]) => {
                        console.log(`   ${agent}: ${state.status} - ${state.currentTask || 'idle'}`);
                    });
                }

                console.log('\nüìä Memory Stats:');
                console.log(`   Total sessions: ${status.memoryStats.totalSessions}`);
                console.log(`   Project age: ${status.memoryStats.projectAge} days`);
                console.log(`   Last session: ${status.memoryStats.lastSession || 'none'}`);
                break;

            // NEW: Memory status command
            case 'memory-status':
                const team2 = new AIDevTeam(projectPath);
                await team2.initialize();

                // Get memory status from SessionManager
                const memStatus = team2.sessions.getMemoryStatus();

                console.log('üß† Memory Status Report');
                console.log('========================');
                console.log(`System Memory: ${memStatus.system.heapUsedMB}MB (${memStatus.system.status})`);
                console.log(`Warning Threshold: ${memStatus.system.warningThreshold}MB`);
                console.log(`Critical Threshold: ${memStatus.system.criticalThreshold}MB`);

                if (memStatus.session) {
                    console.log(`\nActive Session: ${memStatus.session.id}`);
                    console.log(`Handoffs: ${memStatus.session.handoffs}`);
                    console.log(`Work Items: ${memStatus.session.workItems}`);
                } else {
                    console.log('\nNo active session');
                }

                console.log(`\nLast Cleanup: ${memStatus.cleanup.lastCleanup}`);
                console.log(`Auto-save: ${memStatus.cleanup.nextAutoSave}`);

                // Provide recommendations
                if (memStatus.system.status === 'critical') {
                    console.log('\nüö® CRITICAL: Memory usage is dangerous - save session and restart Claude Code');
                } else if (memStatus.system.status === 'warning') {
                    console.log('\n‚ö†Ô∏è WARNING: Memory usage is high - consider saving session');
                } else {
                    console.log('\n‚úÖ Memory usage is healthy');
                }
                break;

            // NEW: Memory cleanup command
            case 'memory-cleanup':
                const team3 = new AIDevTeam(projectPath);
                await team3.initialize();

                console.log('üßπ Forcing memory cleanup...');
                await team3.sessions.forceMemoryCleanup();

                // Force garbage collection if available
                if (global.gc) {
                    global.gc();
                    console.log('üóëÔ∏è Garbage collection completed');
                }

                // Show new status
                const newStatus = team3.sessions.getMemoryStatus();
                console.log(`‚úÖ Cleanup complete. Memory: ${newStatus.system.heapUsedMB}MB (${newStatus.system.status})`);
                break;

            case 'save-session':
                const sessionDescription = args.join(' ') || 'Manual session save';
                const team4 = new AIDevTeam(projectPath);
                await team4.initialize();

                console.log(`üíæ Saving session: "${sessionDescription}"`);
                
                // Update session description before saving
                if (team4.sessions.currentSession) {
                    team4.sessions.currentSession.description = sessionDescription;
                }
                
                await team4.sessions.saveActiveSession();
                console.log('‚úÖ Session saved successfully');

                // Show memory status after save
                const postSaveStatus = team4.sessions.getMemoryStatus();
                console.log(`üìä Memory after save: ${postSaveStatus.system.heapUsedMB}MB (${postSaveStatus.system.status})`);
                break;

            case 'load-session':
                const team5 = new AIDevTeam(projectPath);
                const sessionInfo = await team5.memory.loadLatestSession();
                if (sessionInfo) {
                    console.log('\nüìÇ Latest Session:');
                    console.log(`   ID: ${sessionInfo.sessionId}`);
                    console.log(`   Description: ${sessionInfo.description}`);
                    console.log(`   Started: ${sessionInfo.startTime}`);
                    console.log(`   Last Update: ${sessionInfo.lastUpdate}`);

                    if (sessionInfo.workflow) {
                        console.log(`   Phase: ${sessionInfo.workflow.currentPhase}`);
                        console.log(`   Active Agents: ${sessionInfo.agents.activeCount}`);
                    }
                } else {
                    console.log('üìÇ No saved sessions found');
                }
                break;

            case 'compress-context':
                const team6 = new AIDevTeam(projectPath);
                await team6.initialize();

                console.log('üóúÔ∏è Compressing context for Claude Code...');
                // This would typically be called automatically, but we can force it
                const context = await team6.loadProjectContext();
                const optimized = await team6.tokens.manageContext(context, 'Manual compression request');

                if (optimized.compressed) {
                    console.log(`‚úÖ Context compressed: ${optimized.tokenCount} tokens`);
                    if (optimized.emergency) {
                        console.log('‚ö†Ô∏è Emergency compression was applied due to high memory usage');
                    }
                } else {
                    console.log(`‚úÖ Context already optimized: ${optimized.tokenCount} tokens`);
                }
                break;

            case 'update-memory':
                const memoryUpdate = args.join(' ');
                if (!memoryUpdate) {
                    console.log('‚ùå Please provide a description: mega-minds update-memory "what happened"');
                    break;
                }

                const team7 = new AIDevTeam(projectPath);
                await team7.initialize();
                await team7.updateProjectMemory({ description: memoryUpdate });
                console.log(`‚úÖ Memory updated: "${memoryUpdate}"`);
                break;

            case 'chat':
                const userRequest = args.join(' ');
                if (!userRequest) {
                    console.log('‚ùå Please provide a request: mega-minds chat "your request here"');
                    break;
                }

                const team8 = new AIDevTeam(projectPath);
                console.log(`üéØ Processing: "${userRequest}"`);
                const result = await team8.handleRequest(userRequest);

                if (result.workflow) {
                    console.log('\nüìã Recommended workflow:');
                    result.workflow.steps.forEach((step, i) => {
                        console.log(`   ${i + 1}. ${step.agent}${step.nextAgent ? ` ‚Üí ${step.nextAgent}` : ''}`);
                    });
                }
                break;

            case 'stats':
                const team9 = new AIDevTeam(projectPath);
                const stats = await team9.getAgentStatus();
                console.log('\nüìä Project Statistics:');
                console.log(`   Project path: ${stats.projectPath}`);
                console.log(`   Total development sessions: ${stats.memoryStats.totalSessions}`);
                console.log(`   Project age: ${stats.memoryStats.projectAge} days`);
                console.log(`   Memory files: ${stats.memoryStats.memoryFiles}`);
                break;

            case 'setup-hooks':
                const { setupHooks } = require('../lib/commands/setup-hooks');
                await setupHooks();
                break;

            case 'hook-status':
                const { hookStatus } = require('../lib/commands/hook-status');
                await hookStatus();
                break;

            case 'trigger-quality-gates':
                const { triggerQualityGates } = require('../lib/commands/trigger-quality-gates');
                await triggerQualityGates();
                break;

            case 'save-session-auto':
                const { saveSessionAuto } = require('../lib/commands/save-session-auto');
                await saveSessionAuto();
                break;

            case 'preserve-context':
                const { preserveContext } = require('../lib/commands/preserve-context');
                await preserveContext();
                break;

            case 'verify':
                const { verifyInstallation } = require('../lib/verify-installation');
                verifyInstallation();
                break;

            // New v2.0 Handoff Commands
            case 'record-agent-start':
                const { recordAgentStart } = require('../lib/commands/record-agent-start');
                if (args.length < 2) {
                    console.error('‚ùå Usage: mega-minds record-agent-start "agent-name" "task-description"');
                    process.exit(1);
                }
                await recordAgentStart(args[0], args.slice(1).join(' '));
                break;

            case 'record-agent-complete':
                const { recordAgentComplete } = require('../lib/commands/record-agent-complete');
                if (args.length < 2) {
                    console.error('‚ùå Usage: mega-minds record-agent-complete "agent-name" "completion-summary" ["next-agent"]');
                    process.exit(1);
                }
                await recordAgentComplete(args[0], args[1], args[2]);
                break;

            case 'record-handoff':
                const { recordHandoff } = require('../lib/commands/record-handoff');
                if (args.length < 3) {
                    console.error('‚ùå Usage: mega-minds record-handoff "from-agent" "to-agent" "task-description"');
                    process.exit(1);
                }
                await recordHandoff(args[0], args[1], args.slice(2).join(' '));
                break;

            case 'record-tool-use':
                const ToolUseRecorder = require('../lib/commands/record-tool-use');
                const toolRecorder = new ToolUseRecorder();
                await toolRecorder.run(args);
                break;

            case 'update-agent-status':
                const { updateAgentStatus } = require('../lib/commands/update-agent-status');
                if (args.length < 2) {
                    console.error('‚ùå Usage: mega-minds update-agent-status "agent-name" "status-description" [progress-percentage]');
                    process.exit(1);
                }
                await updateAgentStatus(args[0], args[1], args[2]);
                break;

            case 'acknowledge-handoff':
                const { acknowledgeHandoff } = require('../lib/commands/acknowledge-handoff');
                if (args.length < 1) {
                    console.error('‚ùå Usage: mega-minds acknowledge-handoff "handoff-id" ["acknowledgment-message"]');
                    process.exit(1);
                }
                await acknowledgeHandoff(args[0], args.slice(1).join(' '));
                break;

            case 'complete-handoff':
                const { completeHandoff } = require('../lib/commands/complete-handoff');
                if (args.length < 1) {
                    console.error('‚ùå Usage: mega-minds complete-handoff "handoff-id" ["completion-summary"]');
                    process.exit(1);
                }
                await completeHandoff(args[0], args.slice(1).join(' '));
                break;

            // MEGA-MINDS 2.0: Quality Gate Commands
            case 'run-quality-gates':
                const { runQualityGates } = require('../lib/commands/run-quality-gates');
                const gateOptions = {
                    gates: args.find(arg => arg.startsWith('--gates='))?.replace('--gates=', ''),
                    dryRun: args.includes('--dry-run'),
                    fix: args.includes('--fix'),
                    verbose: args.includes('--verbose')
                };
                await runQualityGates(gateOptions);
                break;

            case 'quality-status':
                const { getQualityStatus } = require('../lib/commands/run-quality-gates');
                await getQualityStatus();
                break;

            // MEGA-MINDS 2.0: Dashboard Commands (Phase 3.1)
            case 'dashboard':
                const subCommand = args[0];
                const dashboardCommands = require('../lib/commands/dashboard');
                
                switch (subCommand) {
                    case 'start':
                        const portArg = args.find(arg => arg.startsWith('--port='));
                        const port = portArg ? parseInt(portArg.replace('--port=', '')) : 3001;
                        await dashboardCommands.startDashboard({ port });
                        break;
                    case 'status':
                        await dashboardCommands.getDashboardStatus();
                        break;
                    case 'open':
                        await dashboardCommands.openDashboard();
                        break;
                    case 'stop':
                        await dashboardCommands.stopDashboard();
                        break;
                    default:
                        dashboardCommands.showDashboardHelp();
                        break;
                }
                break;

            // MEGA-MINDS 2.0: Multi-Project Management Commands (Phase 3.2)
            case 'enable-multi-project':
                const { enableMultiProject } = require('../lib/commands/project-management');
                await enableMultiProject();
                break;

            case 'disable-multi-project':
                const { disableMultiProject } = require('../lib/commands/project-management');
                await disableMultiProject();
                break;

            case 'project':
                const projectSubCommand = args[0];
                const projectCommands = require('../lib/commands/project-management');
                
                switch (projectSubCommand) {
                    case 'add':
                        if (!args[1]) {
                            console.error('‚ùå Usage: mega-minds project add <path> [--name=<name>] [--description=<desc>]');
                            process.exit(1);
                        }
                        const addOptions = {};
                        args.slice(2).forEach(arg => {
                            if (arg.startsWith('--name=')) addOptions.name = arg.replace('--name=', '');
                            if (arg.startsWith('--description=')) addOptions.description = arg.replace('--description=', '');
                            if (arg.startsWith('--tags=')) addOptions.tags = arg.replace('--tags=', '');
                        });
                        await projectCommands.addProject(args[1], addOptions);
                        break;
                    case 'list':
                        const listOptions = {};
                        args.slice(2).forEach(arg => {
                            if (arg.startsWith('--status=')) listOptions.status = arg.replace('--status=', '');
                        });
                        await projectCommands.listProjects(listOptions);
                        break;
                    case 'switch':
                        if (!args[1]) {
                            console.error('‚ùå Usage: mega-minds project switch <id>');
                            process.exit(1);
                        }
                        await projectCommands.switchProject(args[1]);
                        break;
                    case 'status':
                        await projectCommands.showProjectStatus();
                        break;
                    case 'health':
                        if (!args[1]) {
                            console.error('‚ùå Usage: mega-minds project health <id>');
                            process.exit(1);
                        }
                        await projectCommands.checkProjectHealth(args[1]);
                        break;
                    case 'archive':
                        if (!args[1]) {
                            console.error('‚ùå Usage: mega-minds project archive <id>');
                            process.exit(1);
                        }
                        await projectCommands.archiveProject(args[1]);
                        break;
                    case 'restore':
                        if (!args[1]) {
                            console.error('‚ùå Usage: mega-minds project restore <id>');
                            process.exit(1);
                        }
                        await projectCommands.restoreProject(args[1]);
                        break;
                    case 'remove':
                        if (!args[1]) {
                            console.error('‚ùå Usage: mega-minds project remove <id>');
                            process.exit(1);
                        }
                        await projectCommands.removeProject(args[1]);
                        break;
                    case 'find':
                        if (!args[1]) {
                            console.error('‚ùå Usage: mega-minds project find <query>');
                            process.exit(1);
                        }
                        await projectCommands.findProjects(args[1]);
                        break;
                    default:
                        projectCommands.showProjectHelp();
                        break;
                }
                break;

            // MEGA-MINDS 2.0: Enterprise Administration Commands (Phase 3.3)
            case 'enable-team-collaboration':
                const { enableTeamCollaboration } = require('../lib/commands/enterprise-admin');
                await enableTeamCollaboration();
                break;

            case 'enable-monitoring':
                const { enableEnterpriseMonitoring } = require('../lib/commands/enterprise-admin');
                await enableEnterpriseMonitoring();
                break;

            case 'enable-logging':
                const { enableStructuredLogging } = require('../lib/commands/enterprise-admin');
                await enableStructuredLogging();
                break;

            case 'team':
                const teamSubCommand = args[0];
                const enterpriseCommands = require('../lib/commands/enterprise-admin');
                
                switch (teamSubCommand) {
                    case 'add':
                        if (args.length < 3) {
                            console.error('‚ùå Usage: mega-minds team add <userId> <userName> [role]');
                            process.exit(1);
                        }
                        await enterpriseCommands.addTeamMember(args[1], args[2], args[3] || 'collaborator');
                        break;
                    case 'list':
                        await enterpriseCommands.listTeamMembers();
                        break;
                    case 'remove':
                        if (!args[1]) {
                            console.error('‚ùå Usage: mega-minds team remove <userId>');
                            process.exit(1);
                        }
                        await enterpriseCommands.removeTeamMember(args[1]);
                        break;
                    case 'role':
                        if (args.length < 3) {
                            console.error('‚ùå Usage: mega-minds team role <userId> <newRole>');
                            process.exit(1);
                        }
                        await enterpriseCommands.changeTeamMemberRole(args[1], args[2]);
                        break;
                    case 'status':
                        await enterpriseCommands.showTeamStatus();
                        break;
                    case 'activity':
                        const activityOptions = {};
                        args.slice(1).forEach(arg => {
                            if (arg.startsWith('--user=')) activityOptions.user = arg.replace('--user=', '');
                            if (arg.startsWith('--type=')) activityOptions.type = arg.replace('--type=', '');
                            if (arg.startsWith('--limit=')) activityOptions.limit = parseInt(arg.replace('--limit=', ''));
                        });
                        await enterpriseCommands.viewTeamActivity(activityOptions);
                        break;
                    default:
                        enterpriseCommands.showEnterpriseHelp();
                        break;
                }
                break;

            case 'monitoring':
                const monitoringSubCommand = args[0];
                const monitoringCommands = require('../lib/commands/enterprise-admin');
                
                switch (monitoringSubCommand) {
                    case 'status':
                        await monitoringCommands.showMonitoringStatus();
                        break;
                    case 'metrics':
                        await monitoringCommands.showCurrentMetrics();
                        break;
                    case 'alerts':
                        const limit = args[1] ? parseInt(args[1]) : 10;
                        await monitoringCommands.showRecentAlerts(limit);
                        break;
                    case 'health':
                        await monitoringCommands.showMonitoringStatus(); // Same as status for now
                        break;
                    case 'report':
                        const days = args[1] ? parseInt(args[1]) : 7;
                        await monitoringCommands.generateAnalyticsReport(days);
                        break;
                    default:
                        monitoringCommands.showEnterpriseHelp();
                        break;
                }
                break;

            case 'logging':
                const loggingSubCommand = args[0];
                const loggingCommands = require('../lib/commands/enterprise-admin');
                
                switch (loggingSubCommand) {
                    case 'status':
                        await loggingCommands.showLoggingStatus();
                        break;
                    case 'level':
                        if (!args[1]) {
                            console.error('‚ùå Usage: mega-minds logging level <level>');
                            console.error('Available levels: emergency, alert, critical, error, warning, notice, info, debug');
                            process.exit(1);
                        }
                        await loggingCommands.setLogLevel(args[1]);
                        break;
                    case 'stats':
                        await loggingCommands.showLoggingStatus(); // Same as status for now
                        break;
                    default:
                        loggingCommands.showEnterpriseHelp();
                        break;
                }
                break;

            case 'enterprise':
                const { showEnterpriseHelp } = require('../lib/commands/enterprise-admin');
                showEnterpriseHelp();
                break;

            // Variable System Commands (v2.1) - Optional Enhancement
            case 'variable-status':
                const { variableStatus } = require('../lib/commands/variable-status');
                await variableStatus(args);
                break;

            case 'performance-metrics':
                const { performanceMetrics } = require('../lib/commands/performance-metrics');
                await performanceMetrics(args);
                break;

            case 'cache-status':
                const { cacheStatus } = require('../lib/commands/cache-status');
                await cacheStatus(args);
                break;

            case 'doctor':
                const DoctorCommand = require('../lib/commands/doctor');
                const doctor = new DoctorCommand();
                await doctor.run(args);
                break;

            default:
                console.log('ü§ñ mega-minds AI Development Team');
                console.log('\nUsage:');
                console.log('  mega-minds init                    - Initialize AI dev team in current folder');
                console.log('  mega-minds verify                  - Verify installation integrity');
                console.log('  mega-minds doctor                  - Diagnose and fix integration issues');
                console.log('  mega-minds chat "request"          - Get agent coordination for a request');
                console.log('  mega-minds agent-status            - See current agent activity');
                console.log('  mega-minds memory-status           - Check memory usage and health');
                console.log('  mega-minds memory-cleanup          - Force memory cleanup and GC');
                console.log('  mega-minds save-session "desc"     - Save current development session');
                console.log('  mega-minds load-session            - View latest session info');
                console.log('  mega-minds compress-context        - Optimize memory for Claude Code');
                console.log('  mega-minds update-memory "desc"    - Update project memory');
                console.log('  mega-minds stats                   - Show project statistics');
                console.log('  mega-minds setup-hooks             - Configure Claude Code hooks');
                console.log('  mega-minds hook-status             - Check hook configuration');
                console.log('\nüîÑ Agent Handoff Commands (v2.0):');
                console.log('  mega-minds record-agent-start      - Record agent activation');
                console.log('  mega-minds record-agent-complete   - Record agent completion');
                console.log('  mega-minds record-handoff          - Record explicit handoff');
                console.log('  mega-minds update-agent-status     - Update agent progress');
                console.log('  mega-minds acknowledge-handoff     - Acknowledge received handoff');
                console.log('  mega-minds complete-handoff        - Complete handoff task');
                console.log('\nüõ°Ô∏è Quality Gate Commands (v2.0):');
                console.log('  mega-minds run-quality-gates       - Run automated quality checks');
                console.log('  mega-minds quality-status          - Show quality metrics and PRD compliance');
                console.log('\nüìä Dashboard Commands (v2.0):');
                console.log('  mega-minds dashboard start          - Start real-time web dashboard');
                console.log('  mega-minds dashboard status         - Check dashboard status');
                console.log('  mega-minds dashboard open           - Open dashboard in browser');
                console.log('  mega-minds dashboard stop           - Show how to stop dashboard');
                console.log('\nüìÅ Multi-Project Commands (v2.0):');
                console.log('  mega-minds enable-multi-project     - Enable multi-project mode');
                console.log('  mega-minds project list              - List all projects');
                console.log('  mega-minds project add <path>        - Add project to registry');
                console.log('  mega-minds project switch <id>       - Switch to project');
                console.log('  mega-minds project status            - Show current project');
                console.log('\nüè¢ Enterprise Commands (v2.0):');
                console.log('  mega-minds enable-team-collaboration - Enable team collaboration');
                console.log('  mega-minds enable-monitoring         - Enable enterprise monitoring');
                console.log('  mega-minds enable-logging            - Enable structured logging');
                console.log('  mega-minds team list                 - List team members');
                console.log('  mega-minds monitoring status         - Show monitoring status');
                console.log('  mega-minds enterprise                - Show all enterprise commands');
                console.log('\nüîß Variable System Commands (v2.1):');
                console.log('  mega-minds variable-status           - Show Variable System status and values');
                console.log('  mega-minds performance-metrics       - Display detailed performance metrics');
                console.log('  mega-minds cache-status              - Show cache statistics and management');
                console.log('\nüí° Workflow:');
                console.log('  1. Run "mega-minds init" in your project folder');
                console.log('  2. Start Claude Code (it will read CLAUDE.md automatically)');
                console.log('  3. Claude Code can use mega-minds commands for memory management');
                console.log('  4. Agents coordinate automatically based on your requests');
                console.log('\nüß† Memory Management:');
                console.log('  - Use "memory-status" to check memory health');
                console.log('  - Use "memory-cleanup" if Claude Code becomes slow');
                console.log('  - Use "save-session" before memory gets critical');
                console.log('  - Restart Claude Code if memory stays above 3.5GB');
        }
    } catch (error) {
        console.error('‚ùå Error:', error.message);
        process.exit(1);
    }
}

main();